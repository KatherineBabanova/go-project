// Code generated by protoc-gen-go. DO NOT EDIT.
// source: files.proto

package files_proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type File struct {
	// Types that are valid to be assigned to FilePart:
	//	*File_FileHeader
	//	*File_FileChunk
	FilePart             isFile_FilePart `protobuf_oneof:"FilePart"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac8f32ecfdd343c, []int{0}
}

func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

type isFile_FilePart interface {
	isFile_FilePart()
}

type File_FileHeader struct {
	FileHeader *FileHeader `protobuf:"bytes,1,opt,name=FileHeader,json=fileHeader,proto3,oneof"`
}

type File_FileChunk struct {
	FileChunk *FileChunk `protobuf:"bytes,2,opt,name=FileChunk,json=fileChunk,proto3,oneof"`
}

func (*File_FileHeader) isFile_FilePart() {}

func (*File_FileChunk) isFile_FilePart() {}

func (m *File) GetFilePart() isFile_FilePart {
	if m != nil {
		return m.FilePart
	}
	return nil
}

func (m *File) GetFileHeader() *FileHeader {
	if x, ok := m.GetFilePart().(*File_FileHeader); ok {
		return x.FileHeader
	}
	return nil
}

func (m *File) GetFileChunk() *FileChunk {
	if x, ok := m.GetFilePart().(*File_FileChunk); ok {
		return x.FileChunk
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*File) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*File_FileHeader)(nil),
		(*File_FileChunk)(nil),
	}
}

type FileHeader struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Size                 int64    `protobuf:"varint,2,opt,name=Size,json=size,proto3" json:"Size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileHeader) Reset()         { *m = FileHeader{} }
func (m *FileHeader) String() string { return proto.CompactTextString(m) }
func (*FileHeader) ProtoMessage()    {}
func (*FileHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac8f32ecfdd343c, []int{1}
}

func (m *FileHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileHeader.Unmarshal(m, b)
}
func (m *FileHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileHeader.Marshal(b, m, deterministic)
}
func (m *FileHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileHeader.Merge(m, src)
}
func (m *FileHeader) XXX_Size() int {
	return xxx_messageInfo_FileHeader.Size(m)
}
func (m *FileHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_FileHeader.DiscardUnknown(m)
}

var xxx_messageInfo_FileHeader proto.InternalMessageInfo

func (m *FileHeader) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileHeader) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type FileChunk struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileChunk) Reset()         { *m = FileChunk{} }
func (m *FileChunk) String() string { return proto.CompactTextString(m) }
func (*FileChunk) ProtoMessage()    {}
func (*FileChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac8f32ecfdd343c, []int{2}
}

func (m *FileChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileChunk.Unmarshal(m, b)
}
func (m *FileChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileChunk.Marshal(b, m, deterministic)
}
func (m *FileChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileChunk.Merge(m, src)
}
func (m *FileChunk) XXX_Size() int {
	return xxx_messageInfo_FileChunk.Size(m)
}
func (m *FileChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_FileChunk.DiscardUnknown(m)
}

var xxx_messageInfo_FileChunk proto.InternalMessageInfo

func (m *FileChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type FilesUploadResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FilesUploadResp) Reset()         { *m = FilesUploadResp{} }
func (m *FilesUploadResp) String() string { return proto.CompactTextString(m) }
func (*FilesUploadResp) ProtoMessage()    {}
func (*FilesUploadResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac8f32ecfdd343c, []int{3}
}

func (m *FilesUploadResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilesUploadResp.Unmarshal(m, b)
}
func (m *FilesUploadResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilesUploadResp.Marshal(b, m, deterministic)
}
func (m *FilesUploadResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilesUploadResp.Merge(m, src)
}
func (m *FilesUploadResp) XXX_Size() int {
	return xxx_messageInfo_FilesUploadResp.Size(m)
}
func (m *FilesUploadResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FilesUploadResp.DiscardUnknown(m)
}

var xxx_messageInfo_FilesUploadResp proto.InternalMessageInfo

type FilesGetListReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FilesGetListReq) Reset()         { *m = FilesGetListReq{} }
func (m *FilesGetListReq) String() string { return proto.CompactTextString(m) }
func (*FilesGetListReq) ProtoMessage()    {}
func (*FilesGetListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac8f32ecfdd343c, []int{4}
}

func (m *FilesGetListReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilesGetListReq.Unmarshal(m, b)
}
func (m *FilesGetListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilesGetListReq.Marshal(b, m, deterministic)
}
func (m *FilesGetListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilesGetListReq.Merge(m, src)
}
func (m *FilesGetListReq) XXX_Size() int {
	return xxx_messageInfo_FilesGetListReq.Size(m)
}
func (m *FilesGetListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FilesGetListReq.DiscardUnknown(m)
}

var xxx_messageInfo_FilesGetListReq proto.InternalMessageInfo

type FileInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	DateOfCreation       string   `protobuf:"bytes,2,opt,name=DateOfCreation,json=dateOfCreation,proto3" json:"DateOfCreation,omitempty"`
	DateOfModification   string   `protobuf:"bytes,3,opt,name=DateOfModification,json=dateOfModification,proto3" json:"DateOfModification,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac8f32ecfdd343c, []int{5}
}

func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileInfo.Unmarshal(m, b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
}
func (m *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(m, src)
}
func (m *FileInfo) XXX_Size() int {
	return xxx_messageInfo_FileInfo.Size(m)
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileInfo) GetDateOfCreation() string {
	if m != nil {
		return m.DateOfCreation
	}
	return ""
}

func (m *FileInfo) GetDateOfModification() string {
	if m != nil {
		return m.DateOfModification
	}
	return ""
}

func init() {
	proto.RegisterType((*File)(nil), "files_proto.File")
	proto.RegisterType((*FileHeader)(nil), "files_proto.FileHeader")
	proto.RegisterType((*FileChunk)(nil), "files_proto.FileChunk")
	proto.RegisterType((*FilesUploadResp)(nil), "files_proto.FilesUploadResp")
	proto.RegisterType((*FilesGetListReq)(nil), "files_proto.FilesGetListReq")
	proto.RegisterType((*FileInfo)(nil), "files_proto.FileInfo")
}

func init() { proto.RegisterFile("files.proto", fileDescriptor_cac8f32ecfdd343c) }

var fileDescriptor_cac8f32ecfdd343c = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x6d, 0x6c, 0xa8, 0x66, 0xaa, 0x95, 0x0e, 0xa8, 0xa5, 0x08, 0x4a, 0x0e, 0xd2, 0x53, 0x90,
	0x2a, 0x82, 0x78, 0x91, 0xb6, 0x68, 0x05, 0xbf, 0xd8, 0xe2, 0xc5, 0x8b, 0xac, 0xcd, 0x04, 0x17,
	0xdb, 0x6c, 0xcc, 0xae, 0x3d, 0xf4, 0xee, 0xc1, 0x7f, 0x2d, 0xbb, 0xab, 0x6d, 0x24, 0x3d, 0x2d,
	0xef, 0x63, 0x78, 0xef, 0x85, 0x40, 0x3d, 0x11, 0x13, 0x52, 0x51, 0x96, 0x4b, 0x2d, 0xd1, 0x81,
	0x17, 0x0b, 0xc2, 0x2f, 0x0f, 0xfc, 0x2b, 0x31, 0x21, 0x3c, 0x07, 0x30, 0xef, 0x90, 0x78, 0x4c,
	0x79, 0xcb, 0x3b, 0xf4, 0x3a, 0xf5, 0xee, 0x5e, 0x54, 0xb0, 0x46, 0x4b, 0x79, 0x58, 0x61, 0x90,
	0x2c, 0x10, 0x9e, 0x41, 0x60, 0xb4, 0xfe, 0xdb, 0x67, 0xfa, 0xde, 0x5a, 0xb3, 0x97, 0xbb, 0xa5,
	0x4b, 0xab, 0x0e, 0x2b, 0x2c, 0x48, 0xfe, 0x40, 0x0f, 0x60, 0xc3, 0x28, 0x8f, 0x3c, 0xd7, 0xe1,
	0x69, 0x31, 0x1e, 0x11, 0xfc, 0x7b, 0x3e, 0x25, 0x5b, 0x23, 0x60, 0x7e, 0xca, 0xa7, 0x64, 0xb8,
	0x91, 0x98, 0x93, 0x0d, 0xa8, 0x32, 0x5f, 0x89, 0x39, 0x85, 0x07, 0x85, 0x64, 0x63, 0x18, 0x70,
	0xcd, 0xed, 0xd1, 0x26, 0xf3, 0x63, 0xae, 0x79, 0xd8, 0x84, 0x6d, 0x63, 0x50, 0x4f, 0xd9, 0x44,
	0xf2, 0x98, 0x91, 0xca, 0x16, 0xd4, 0x35, 0xe9, 0x5b, 0xa1, 0x34, 0xa3, 0x8f, 0x70, 0xe6, 0x8a,
	0xdc, 0xa4, 0x89, 0x5c, 0x19, 0x7d, 0x04, 0x8d, 0x01, 0xd7, 0xf4, 0x90, 0xf4, 0x73, 0xe2, 0x5a,
	0xc8, 0xd4, 0x96, 0x08, 0x58, 0x23, 0xfe, 0xc7, 0x62, 0x04, 0xe8, 0x7c, 0x77, 0x32, 0x16, 0x89,
	0x18, 0x3b, 0x6f, 0xd5, 0x7a, 0x31, 0x2e, 0x29, 0xdd, 0x6f, 0xcf, 0x05, 0xab, 0xd1, 0x6c, 0x8c,
	0x17, 0x50, 0x73, 0x2d, 0xb1, 0x59, 0xfa, 0x78, 0xed, 0xfd, 0x12, 0x55, 0x98, 0xd4, 0xf1, 0xf0,
	0x12, 0xd6, 0x7f, 0xf7, 0xe0, 0x0a, 0xeb, 0x72, 0x6a, 0x7b, 0xa7, 0xa4, 0x9a, 0xd5, 0xc7, 0x5e,
	0x6f, 0xeb, 0xb9, 0xf8, 0x5f, 0xbc, 0xd6, 0xec, 0x73, 0xf2, 0x13, 0x00, 0x00, 0xff, 0xff, 0x49,
	0x94, 0x3c, 0xd5, 0x3a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FilesSvcClient is the client API for FilesSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FilesSvcClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (FilesSvc_UploadClient, error)
	GetList(ctx context.Context, in *FilesGetListReq, opts ...grpc.CallOption) (FilesSvc_GetListClient, error)
}

type filesSvcClient struct {
	cc *grpc.ClientConn
}

func NewFilesSvcClient(cc *grpc.ClientConn) FilesSvcClient {
	return &filesSvcClient{cc}
}

func (c *filesSvcClient) Upload(ctx context.Context, opts ...grpc.CallOption) (FilesSvc_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FilesSvc_serviceDesc.Streams[0], "/files_proto.FilesSvc/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesSvcUploadClient{stream}
	return x, nil
}

type FilesSvc_UploadClient interface {
	Send(*File) error
	CloseAndRecv() (*FilesUploadResp, error)
	grpc.ClientStream
}

type filesSvcUploadClient struct {
	grpc.ClientStream
}

func (x *filesSvcUploadClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *filesSvcUploadClient) CloseAndRecv() (*FilesUploadResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FilesUploadResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesSvcClient) GetList(ctx context.Context, in *FilesGetListReq, opts ...grpc.CallOption) (FilesSvc_GetListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FilesSvc_serviceDesc.Streams[1], "/files_proto.FilesSvc/GetList", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesSvcGetListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FilesSvc_GetListClient interface {
	Recv() (*FileInfo, error)
	grpc.ClientStream
}

type filesSvcGetListClient struct {
	grpc.ClientStream
}

func (x *filesSvcGetListClient) Recv() (*FileInfo, error) {
	m := new(FileInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FilesSvcServer is the server API for FilesSvc service.
type FilesSvcServer interface {
	Upload(FilesSvc_UploadServer) error
	GetList(*FilesGetListReq, FilesSvc_GetListServer) error
}

// UnimplementedFilesSvcServer can be embedded to have forward compatible implementations.
type UnimplementedFilesSvcServer struct {
}

func (*UnimplementedFilesSvcServer) Upload(srv FilesSvc_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (*UnimplementedFilesSvcServer) GetList(req *FilesGetListReq, srv FilesSvc_GetListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetList not implemented")
}

func RegisterFilesSvcServer(s *grpc.Server, srv FilesSvcServer) {
	s.RegisterService(&_FilesSvc_serviceDesc, srv)
}

func _FilesSvc_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FilesSvcServer).Upload(&filesSvcUploadServer{stream})
}

type FilesSvc_UploadServer interface {
	SendAndClose(*FilesUploadResp) error
	Recv() (*File, error)
	grpc.ServerStream
}

type filesSvcUploadServer struct {
	grpc.ServerStream
}

func (x *filesSvcUploadServer) SendAndClose(m *FilesUploadResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *filesSvcUploadServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FilesSvc_GetList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FilesGetListReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesSvcServer).GetList(m, &filesSvcGetListServer{stream})
}

type FilesSvc_GetListServer interface {
	Send(*FileInfo) error
	grpc.ServerStream
}

type filesSvcGetListServer struct {
	grpc.ServerStream
}

func (x *filesSvcGetListServer) Send(m *FileInfo) error {
	return x.ServerStream.SendMsg(m)
}

var _FilesSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "files_proto.FilesSvc",
	HandlerType: (*FilesSvcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _FilesSvc_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetList",
			Handler:       _FilesSvc_GetList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "files.proto",
}
